<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-10-23T12:01:22+02:00</updated><id>/</id><title type="html">memoriasIT</title><subtitle>Memorias de un Inform√°tico</subtitle><entry><title type="html">#post Dll Injection</title><link href="/Post-DLL-Injection" rel="alternate" type="text/html" title="#post Dll Injection" /><published>2019-09-22T00:00:00+02:00</published><updated>2019-09-22T00:00:00+02:00</updated><id>/#Post-DLL-Injection</id><content type="html" xml:base="/Post-DLL-Injection">I don't really understand your question, why windows 7? And what are you reffering to with &quot;procs related to those&quot; ?

Maybe for some inspiration you could check other malwares such as Zeus/Zbot which injects code in processes like winlogon, explorer, csrss or smss.

The main functions you want to use are:

CreateRemoteThread() or whatever other API function to start the execution in the remote process.
WriteProcessMemory()
SetWindowsHookEX()

GetProcAddress()a
LoadLibraryA()
VirtualAllockEx()

These seem to be more or less the standard, however I have seen other implementations/methods like the one that zerosum0x0 did usign SetThreadContext() and NtContinue().
https://zerosum0x0.blogspot.com/2017/07/threadcontinue-reflective-injection.html

As always github has a lot of implementations and good explanations like this one:
https://github.com/stephenfewer/ReflectiveDLLInjection

For what I know, usually what is done is review the memory sections that are marked as Page_Execute_ReadWrite (or RWX) and try to parse out the memory for injected code.
Here you have a open source tool that basically does what I said, you can try to see the code and reverse engineer the behaviour:
http://hooked-on-mnemonics.blogspot.com/p/injdmp.html

For game hacking, where dlls are used too people use &quot;manual mapping&quot;, also refered as &quot;manual dll injection&quot;. You can check a YouTube channel called &quot;Guided Hacking&quot; which is a  lot of fun and very informative. As I said, he is more related to hacking games but I suppose that it could help for your project too.

Most detectproof cheats use virtual machines that interact with the process from the outside or hide in ring 0 and create a debugger that interacts with the process. In conclussion all you want is to avoid the detection of your hooks.

DEFCON has a lot of good talks about code injection, this one is about reflective dll injection which I suppose that is what you are trying to achieve.
https://www.defcon.org/images/defcon-20/dc-20-presentations/King/DEFCON-20-King-Reflective-Injection-Detection.pdf
And the tool he mentions can be found here:
https://github.com/aking1012/dc20

DLLs are tracked in three different doubly-linked lists for each process. What you want to achieve is to unlink the loaded DLLs from these lists. This is a representation of how it more or less looks like:
[image]https://www.aldeid.com/w/images/3/3c/EPROCESS.png
source: https://www.aldeid.com/wiki/EPROCESS

I found an article which looks pretty good:
http://jumpdollar.blogspot.com/2014/09/windbg-walking-windows-linked-lists.html

The detection of injected processes are also achieved by enumerating DLLs injected by the OS via registry key. You want to use AppInitDLLs or AppCertDLL.

Redacting more about kernel manipulation you can look more about DKOM (which stands for Direct Kernel Object Manipulation) and can help you hiding processes, adding priviledges, etc.

Good luck my friend, and hope to see your code up soon ;)</content><author><name></name></author><summary type="html">I don't really understand your question, why windows 7? And what are you reffering to with &quot;procs related to those&quot; ?</summary></entry><entry><title type="html">#dll Injection</title><link href="/DLL-Injection" rel="alternate" type="text/html" title="#dll Injection" /><published>2019-09-22T00:00:00+02:00</published><updated>2019-09-22T00:00:00+02:00</updated><id>/#DLL-Injection</id><content type="html" xml:base="/DLL-Injection">----{ dll injection }----

The main functions used are
CreateRemoteThread() or whatever other API function to start the execution in the remote process.

WriteProcessMemory()

SetWindowsHookEx()

GetProcAddress
LoadLibraryA()
VirtualAllockEx()

However There are many other methods like
https://zerosum0x0.blogspot.com/2017/07/threadcontinue-reflective-injection.html

Here you can see other implementations
https://github.com/stephenfewer/ReflectiveDLLInjection


----{ Detection }----
review memory sections marked as Page_Execute_ReadWrite (or RWX) with no memory-mapped file present and try to parse out the memory for injected code.
Here I found a tool which does basically what I said, and it is open source so you can try to download the code and see how it works: http://hooked-on-mnemonics.blogspot.com/p/injdmp.html

for processs hollowing the process image is not backed with file on disk

for games I know that you want to use manual mapping or manual dll injection there is a channel on youtube called guided hacking which is very informative. As I said, more related to games but might work for your purpose

The main logic behind this is emulating the behaviour of LoadLibrary but without putting the DLL into the process module list.

In games, one of the bests options for avoiding detection might be using virtual machines that interact with the process form outside of the virtual machine. Else you could try to hide in ring 0 and create a debugger that interacts with the process. In conclussion all you want to do is avoid the detection of your hooks.

Reflecting detection talk in DEFCON 20:
https://www.defcon.org/images/defcon-20/dc-20-presentations/King/DEFCON-20-King-Reflective-Injection-Detection.pdf
And the tool he mentions can be found here:
https://github.com/aking1012/dc20

---{ Processes }---
Zeus/Zbot
	winlogon.exe
	explorer.exe
	csrss
	smss

---{ Tracking }---

DLLs are tracked in three different doubly-linked lists for each process. However, stealthy malwares can unlink loaded DLLs from theses lists
[image]https://www.aldeid.com/w/images/3/3c/EPROCESS.png
source: https://www.aldeid.com/wiki/EPROCESS


WinDbg : Walking Windows Linked Lists (LIST_ENTRY) 
http://jumpdollar.blogspot.com/2014/09/windbg-walking-windows-linked-lists.html

To detect injected processes you could for example enumerate DLLs that are injected by the OS via registry key. Some keys used are AppCertDLL and AppInitDLLs

Hiding techniques, the article is old but gold. Maybe more related to rootkits but might still help you.
DKOM stands for Direct Kernel Object Manipulation and can help you hiding processes, adding priveleges to tokens, hiding ports...
https://davidechiappetta.wordpress.com/2012/09/29/hiding-with-dkom/</content><author><name></name></author><summary type="html">----{ dll injection }----</summary></entry><entry><title type="html">RaspberryPi Barebones</title><link href="/RaspberryPiBarebones" rel="alternate" type="text/html" title="RaspberryPi Barebones" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/#RaspberryPiBarebones</id><content type="html" xml:base="/RaspberryPiBarebones">arm</content><author><name>memoriasIT</name></author><category term="remote" /><category term="programming" /><summary type="html">arm</summary></entry><entry><title type="html">Remote programming setup</title><link href="/Remote-programming" rel="alternate" type="text/html" title="Remote programming setup" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/#Remote-programming</id><content type="html" xml:base="/Remote-programming">remote vim setup + server running scripts
bots for instagram, twitter, etc.
also running astral parser from time to time</content><author><name>memoriasIT</name></author><category term="remote" /><category term="programming" /><summary type="html">remote vim setup + server running scripts bots for instagram, twitter, etc. also running astral parser from time to time</summary></entry><entry><title type="html">Scraping infinite websites for quotes</title><link href="/Scraping-infinite-websites" rel="alternate" type="text/html" title="Scraping infinite websites for quotes" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/Scraping-infinite-websites</id><content type="html" xml:base="/Scraping-infinite-websites">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;
    Lately, as a module of a big project I'm working on, I wanted to get some &lt;b&gt;quotes&lt;/b&gt;.
My goal at first was to use whatever &lt;b&gt;API&lt;/b&gt; available for free.
&lt;/p&gt;

&lt;p&gt;
    There was one, which worked, but it only provided a few requests per hour.
As I needed something beefier, I started my hunt.
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Github&lt;/b&gt; is usually my first go-to for projects like these. 
It is easy to find other people who wanted to achieve the same as you and already thought about it.
&lt;/p&gt;

&lt;p&gt;
    There were several unofficial API's for famous websites, but, I tried some of them and they did not work.
My guess is that they changed their design.
&lt;/p&gt;

&lt;p&gt;I decided to contribute to the most famous project and fix it. &lt;br&gt;
    And that's how I met this &lt;b&gt;pull request&lt;/b&gt;.
    &lt;/p&gt;

&lt;h2&gt;Scraping&lt;/h2&gt;


&lt;p&gt;I'm not going to lie. Scrappers are usually the kind of projects I do from time to time to boost my confidence because they are just too easy and yet fun.
   &lt;br&gt; For me it's always the same, python with the plugins: &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;beautiful soup 4&lt;/code&gt; and with that manage to parse what I want.
    In order to achieve that I sometimes need other additional plugins like &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;regex&lt;/code&gt;.
    &lt;/p&gt;

&lt;p&gt;First of all, you need to get the raw data, that's why you use &lt;b&gt;requests&lt;/b&gt;.
    Also, create a beautiful soup &lt;b&gt;parser&lt;/b&gt;, that we will use to search in the html code.
    &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;category_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://www.brainyquote.com/quotes/topics.html'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you have the raw data you just have to parser. In this case I just used &lt;code&gt;soup.find()&lt;/code&gt; and &lt;code&gt;soup.find_all()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;href&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Infinite Scroll Websites&lt;/h2&gt;
&lt;p&gt;However, content is not always static. It might change with certain events, for example, user scroll.
    Infinite scroll websites are becomming a trend lately. They allow users to consume content non-stop.&lt;/p&gt;


&lt;p&gt;For us, who just want to automate the &lt;dfn&gt;&quot;consumption&quot;&lt;/dfn&gt; of the content, this will just mean a pain in the ass.
    There are two main alternatives that I came accross.
    &lt;/p&gt;

&lt;p&gt;The first one is to recreate the user movements.
    We can use a python module called &lt;code&gt;Selenium&lt;/code&gt;. The idea is to execute the scrolling down until you have enough data and then parse it.
    Unfortunately, this is not the method that I ended up using, as the second one can be easier if achievable.&lt;/p&gt;

&lt;p&gt;The second one, is just finding &lt;dfn&gt;&quot;pages&quot;&lt;/dfn&gt;. Most of the times, even if the website has infinite scroll, pages are still implemented.
    If we manage to find the URL for the pages we can do it the old-school way.&lt;/p&gt;

&lt;p&gt;For this, the web developers consoles are very helpful. Try to find calls to .js, buttons and hidden links.&lt;/p&gt;

&lt;p&gt;In the scenario I was, the pages where given by the url:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# x is a number from 1 to n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.brainyquote.com/quotes/topics/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
Inside the page, divs were created with a numeration 1 to 23. &lt;br&gt;
Therefore all I had to do was generate the combination:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 1_1, 1_2, 1_.., 1_23, 2_1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# x and y form the divID, n is the number of quotes generated&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfQuotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# List starts at 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# New Page must be loaded&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# We can get each page individually with &quot;%category%_[1..]&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getTheCorrespondingPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;parseDataAndAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
I removed some parts of the code above to make it simpler to understand. &lt;br&gt;
We basically use the modulus operator for the circular counter and then we get the data from the page. &lt;br&gt;
Inside the page we parse the data and append it to a list.  
&lt;/p&gt;

&lt;h2&gt;Learn More&lt;/h2&gt;
&lt;p&gt;
If you are interested in seeing the code, you can find it in my github, and maybe, if the user of the original repo has accepted my pull request in his own repo.
&lt;/p&gt;

&lt;p&gt;
My repository: &lt;br&gt;
His repository (check for recent updates!): 
&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="remote" /><category term="programming" /><summary type="html">Introduction</summary></entry><entry><title type="html">proximity cards</title><link href="/Proximity-Cards" rel="alternate" type="text/html" title="proximity cards" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/#Proximity-Cards</id><content type="html" xml:base="/Proximity-Cards">https://greysec.net/showthread.php?tid=2931&amp;pid=10663#pid10663</content><author><name>memoriasIT</name></author><category term="remote" /><category term="programming" /><summary type="html">https://greysec.net/showthread.php?tid=2931&amp;pid=10663#pid10663</summary></entry><entry><title type="html">Introduction to electronics</title><link href="/Introduction-to-electronics" rel="alternate" type="text/html" title="Introduction to electronics" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/Introduction-to-electronics</id><content type="html" xml:base="/Introduction-to-electronics">Lately, I have been doing some videos related to electronics.
Here you can find the full playlist of videos.

It covers a wide range of contents.
Kirchoff, Digital design, MOSFETs, transistors, diodes, etc.

However, the videos are made in spanish, as I feel that the community lacks some good tutorials in spanish.
Feel free to give me your opinions and suggestions in order to improve my quality for future content.

Full playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&quot;&gt;Link&lt;/a&gt;

&lt;h3&gt; List of videos &lt;/h3&gt;
&lt;p style=&quot;margin:0%; padding: 0%&quot;&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=1&quot;&gt;&lt;img width=&quot;33%&quot; style=&quot;margin: 0%; padding: 0%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/1.png&quot;&gt;&lt;br&gt;Magnitudes, elementos y an√°lisis de circuitos (Kirchoff/Th√©venin)&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=2&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/2.png&quot;&gt;&lt;br&gt; Introducci√≥n a las familias l√≥gicas&lt;/a&gt;  
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=3&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/3.png&quot;&gt;&lt;br&gt; Semiconductores y Diodos&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=4&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/4.png&quot;&gt;&lt;br&gt;   Transistor Bipolar, RTL, DTL y TTL&lt;/a&gt;  
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=5&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/5.png&quot;&gt;&lt;br&gt;   Transistor MOSFET, Familia NMOS y CMOS&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=6&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/6.png&quot;&gt;&lt;br&gt;   Sistemas de Numeraci√≥n (Binario, Signo Magnitud, Complemento a 2, BCD, Gray, Exceso 3)&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=acttbfPwzns&amp;list=PLqsewl9xsOjblkomgeglS9es2yL3axs0j&amp;index=7&quot;&gt;&lt;img width=&quot;33%&quot; src=&quot;https://raw.githubusercontent.com/memoriasIT/Electronics-VideoTutorials/master/Electronica%20videos/7.png&quot;&gt;&lt;br&gt;Algebra de Boole y Simplificaci√≥n de Circuitos por Karnaugh&lt;/a&gt;  
&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="Electronics" /><category term="course" /><category term="basics" /><summary type="html">Lately, I have been doing some videos related to electronics. Here you can find the full playlist of videos.</summary></entry><entry><title type="html">Benchmarking 101</title><link href="/addvideos-Benchmarking101" rel="alternate" type="text/html" title="Benchmarking 101" /><published>2018-10-28T09:00:00+01:00</published><updated>2018-10-28T09:00:00+01:00</updated><id>/#%23addvideos-Benchmarking101</id><content type="html" xml:base="/addvideos-Benchmarking101">&lt;p&gt;When comparing several computers there are a lot of parameters to take into account.&lt;/p&gt;
&lt;p&gt; &lt;i&gt;Speed, power consumption, bandwidth, execution time... &lt;/i&gt; are some examples.&lt;/p&gt;

&lt;p&gt;And there are also endless posibilities to measure those parameters.&lt;/p&gt;

&lt;p&gt;That's why I made a little &lt;a href=&quot;https://www.youtube.com/c/MemoriasdeunInformatico&quot;&gt; course &lt;/a&gt;explaining common practices and several real case scenarios proving my point.&lt;/p&gt;

&lt;p&gt;The course is mainly practical and I wanted to make it short and easy to follow.&lt;/p&gt;

&lt;p&gt; It is in Spanish, however, I am planning on adding substitles. Anyways the resources are available for everyone, and you can always follow them as they are mathematical approaches.&lt;/p&gt;

&lt;p&gt;Please if you liked it share it with your friends as it would really help me.
&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="Benchmarking" /><category term="introduction" /><category term="course" /><summary type="html">When comparing several computers there are a lot of parameters to take into account. Speed, power consumption, bandwidth, execution time... are some examples.</summary></entry><entry><title type="html">Intelligent Doorlock</title><link href="/Intelligent-DoorLock" rel="alternate" type="text/html" title="Intelligent Doorlock" /><published>2018-10-18T10:00:00+02:00</published><updated>2018-10-18T10:00:00+02:00</updated><id>/#Intelligent-DoorLock</id><content type="html" xml:base="/Intelligent-DoorLock">&lt;h1&gt;Notes&lt;/h1&gt;
&lt;h3&gt;IoT Security&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GSM is fucked (?)&lt;/li&gt;
&lt;li&gt;Different Passwords (not hardcoded)&lt;/li&gt;
&lt;li&gt;SSL/TLS&lt;/li&gt;
&lt;li&gt;Custom Infrastructure? Not average UART&lt;/li&gt;
&lt;li&gt;AutoUpdates!!&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Admin pages, user pages, etc.&lt;/li&gt;
&lt;li&gt;MITM&lt;/li&gt;
&lt;li&gt;Do not hide things in firmware&lt;/li&gt;
&lt;li&gt;Dump memory&lt;/li&gt;
&lt;li&gt;Cool dump&lt;/li&gt;
&lt;li&gt;Don't hardcode things in firmware, segundo aviso&lt;/li&gt;
&lt;li&gt;Replay Injection&lt;/li&gt;
&lt;li&gt;Key Straction&lt;/li&gt;
&lt;li&gt;NO TELNET&lt;/li&gt;
&lt;li&gt;Not use MD5&lt;/li&gt;
&lt;li&gt;Encrypt Storage of Customer Data&lt;/li&gt;
&lt;li&gt;Don't use Long-life (clear-text) API Tokens&lt;/li&gt;
&lt;li&gt;Mobile Security&lt;/li&gt;
&lt;li&gt;Don't use generic ODM Firmware&lt;/li&gt;
&lt;li&gt;Encrypted API calls&lt;/li&gt;
&lt;li&gt;Wifi Recon&lt;/li&gt;
&lt;li&gt;File deletion control&lt;/li&gt;
&lt;li&gt;Customer data segmentation&lt;/li&gt;
&lt;li&gt;http digest&lt;/li&gt;
&lt;li&gt;Session ID generated by using more than UNIX epoch timestamp. Use real session management&lt;/li&gt;
&lt;li&gt;Dont use mobile app be the authority of account balances, use transaction log on backend and what balance should be&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Possible hardware&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Electic Imp&lt;/li&gt;
&lt;li&gt;GumStix&lt;/li&gt;
&lt;li&gt;Arduino&lt;/li&gt;
&lt;li&gt;Pinoccio&lt;/li&gt;
&lt;li&gt;RaspPi&lt;/li&gt;
&lt;/ul&gt;</content><author><name>memoriasIT</name></author><category term="intelligent" /><category term="door" /><category term="lock" /><category term="project" /><summary type="html">Notes IoT Security GSM is fucked (?) Different Passwords (not hardcoded) SSL/TLS Custom Infrastructure? Not average UART AutoUpdates!! Authentication Admin pages, user pages, etc. MITM Do not hide things in firmware Dump memory Cool dump Don't hardcode things in firmware, segundo aviso Replay Injection Key Straction NO TELNET Not use MD5 Encrypt Storage of Customer Data Don't use Long-life (clear-text) API Tokens Mobile Security Don't use generic ODM Firmware Encrypted API calls Wifi Recon File deletion control Customer data segmentation http digest Session ID generated by using more than UNIX epoch timestamp. Use real session management Dont use mobile app be the authority of account balances, use transaction log on backend and what balance should be</summary></entry><entry><title type="html">Managing Github Stars</title><link href="/Generating-Beautiful-Images-With-PIL" rel="alternate" type="text/html" title="Managing Github Stars" /><published>2018-10-03T10:00:00+02:00</published><updated>2018-10-03T10:00:00+02:00</updated><id>/Generating-Beautiful-Images-With-PIL</id><content type="html" xml:base="/Generating-Beautiful-Images-With-PIL">&lt;h2&gt;
Introduction
&lt;/h2&gt;

&lt;p&gt;
Once more, in my journey of automating everything, I developed a Instagram posts generator.
The results are pretty beautiful to my eyes, and everything happens automatically.
&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="github" /><category term="stars" /><category term="project" /><summary type="html">Introduction</summary></entry></feed>